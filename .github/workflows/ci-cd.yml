name: CI/CD Pipeline

on:
  push:
    branches:
      - 'main'
      - 'releases-*'
  pull_request:
    branches:
      - '*'
env:
  SONAR_PROJECT_KEY: flickit-assessment-core
  REGISTRY: ghcr.io
  IMAGE_NAME: flickit-platform/flickit-assessment
  JIB_OPT: -Djib.httpTimeout=240000 -Dmaven.test.skip=true
  JIB_CMD: clean install jib:build

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Build with Maven
        run: mvn clean compile

  test:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Run Tests
        run: mvn test -Dspring.profiles.active=test

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

  sonar:
    needs: [test]
    runs-on: ubuntu-latest

    outputs:
      project_version: ${{ steps.project.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Extract Maven project version
        run: echo version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) >> $GITHUB_OUTPUT
        id: project

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.project.outputs.version }}
        run: |
          echo $RELEASE_VERSION

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}

  build-and-push-latest-image:
    needs: [sonar]
    name: deploy latest image
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        id: vars

      - name: Set output
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: flickit-platform
          password: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Extract GitHub SHA
        run: echo sha=${GITHUB_SHA:0:7} >> $GITHUB_OUTPUT
        id: github_sha7

      - name: Check output
        env:
          GITHUB_SHA_7: ${{ steps.github_sha7.outputs.sha }}
        run: |
          echo $GITHUB_SHA_7

      - name: Build and push image
        run: mvn ${{ env.JIB_OPT }} -Djib.to.image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.github_sha7.outputs.sha }}" ${{ env.JIB_CMD }}

  deploy-latest:
    needs: [build-and-push-latest-image]
    name: deploy latest
    runs-on: ubuntu-latest
    steps:
      - name: Deploy service on Webhook
        run: |
          status_code=$(curl --silent --output /dev/null --write-out "%{http_code}" -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}?tag=${GITHUB_SHA:0:7}")
          if [ "$status_code" -ne 204 ]; then
            echo "Unexpected status code: $status_code"
            exit 1
          fi


  tag-and-release:
    needs: [sonar]
    name: tag and release
    runs-on: ubuntu-latest
    if: ${{ ((github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases-'))) ||
      github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) &&
      !contains( needs.sonar.outputs.project_version , 'SNAPSHOT') }}

    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.sonar.outputs.project_version }}
          name: Release ${{ needs.sonar.outputs.project_version }}
          makeLatest: true

  build-and-push-image:
    needs: [tag-and-release]
    name: deploy image
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    outputs:
      project_version: ${{ steps.project.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        id: vars

      - name: Set output
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: flickit-platform
          password: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Extract Maven project version
        run: echo version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) >> $GITHUB_OUTPUT
        id: project

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.project.outputs.version }}
        run: |
          echo $RELEASE_VERSION

      - name: Build and push image
        if: v${{ steps.project.outputs.version }} == ${{ steps.vars.outputs.tag }}
        run: mvn ${{ env.JIB_OPT }} -Djib.to.image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.project.outputs.version }}" ${{ env.JIB_CMD }}

  deploy:
    needs: [build-and-push-image]
    name:  deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deploy service on Webhook
        run: |
          status_code=$(curl --silent --output /dev/null --write-out "%{http_code}" -X POST "${{ secrets.DEPLOY_WEBHOOK_URL_PRODUCTION }}?tag=${PROJECT_VERSION}")
          if [ "$status_code" -ne 204 ]; then
            echo "Unexpected status code: $status_code"
            exit 1
          fi
